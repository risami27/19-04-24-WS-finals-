


import {ContextualKeyword} from "../parser/tokenizer/keywords";
import {TokenType as tt} from "../parser/tokenizer/types";

import elideImportEquals from "../util/elideImportEquals";
import getDeclarationInfo, {

  EMPTY_DECLARATION_INFO,
} from "../util/getDeclarationInfo";
import getImportExportSpecifierInfo from "../util/getImportExportSpecifierInfo";
import {getNonTypeIdentifiers} from "../util/getNonTypeIdentifiers";
import isExportFrom from "../util/isExportFrom";
import {removeMaybeImportAttributes} from "../util/removeMaybeImportAttributes";
import shouldElideDefaultExport from "../util/shouldElideDefaultExport";

import Transformer from "./Transformer";

/**
 * Class for editing import statements when we are keeping the code as ESM. We still need to remove
 * type-only imports in TypeScript and Flow.
 */
export default class ESMImportTransformer extends Transformer {
  
  
  

  constructor(
     tokens,
     nameManager,
     helperManager,
     reactHotLoaderTransformer,
     isTypeScriptTransformEnabled,
     isFlowTransformEnabled,
     keepUnusedImports,
    options,
  ) {
    super();this.tokens = tokens;this.nameManager = nameManager;this.helperManager = helperManager;this.reactHotLoaderTransformer = reactHotLoaderTransformer;this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;this.isFlowTransformEnabled = isFlowTransformEnabled;this.keepUnusedImports = keepUnusedImports;;
    this.nonTypeIdentifiers =
      isTypeScriptTransformEnabled && !keepUnusedImports
        ? getNonTypeIdentifiers(tokens, options)
        : new Set();
    this.declarationInfo =
      isTypeScriptTransformEnabled && !keepUnusedImports
        ? getDeclarationInfo(tokens)
        : EMPTY_DECLARATION_INFO;
    this.injectCreateRequireForImportRequire = Boolean(options.injectCreateRequireForImportRequire);
  }

  process() {
    // TypeScript `import foo = require('foo');` should always just be translated to plain require.
    if (this.tokens.matches3(tt._import, tt.name, tt.eq)) {
      return this.processImportEquals();
    }
    if (
      this.tokens.matches4(tt._import, tt.name, tt.name, tt.eq) &&
      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, ContextualKeyword._type)
    ) {
      // import type T = require('T')
      this.tokens.removeInitialToken();
      // This construct is always exactly 8 tokens long, so remove the 7 remaining tokens.
      for (let i = 0; i < 7; i++) {
        this.tokens.removeToken();
      }
      return true;
    }
    if (this.tokens.matches2(tt._export, tt.eq)) {
      this.tokens.replaceToken("module.exports");
      return true;
    }
    if (
      this.tokens.matches5(tt._export, tt._import, tt.name, tt.name, tt.eq) &&
      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 2, ContextualKeyword._type)
    ) {
      // export import type T = require('T')
      this.tokens.removeInitialToken();
      // This construct is always exactly 9 tokens long, so remove the 8 remaining tokens.
      for (let i = 0; i < 8; i++) {
        this.tokens.removeToken();
      }
      return true;
    }
    if (this.tokens.matches1(tt._import)) {
      return this.processImport();
    }
    if (this.tokens.matches2(tt._export, tt._default)) {
      return this.processExportDefault();
    }
    if (this.tokens.matches2(tt._export, tt.braceL)) {
      return this.processNamedExports();
    }
    if (
      this.tokens.matches2(tt._export, tt.name) &&
      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, ContextualKeyword._type)
    ) {
      // export type {a};
      // export type {a as b};
      // export type {a} from './b';
      // export type * from './b';
      // export type * as ns from './b';
      this.tokens.removeInitialToken();
      this.tokens.removeToken();
      if (this.tokens.matches1(tt.braceL)) {
        while (!this.tokens.matches1(tt.braceR)) {
          this.tokens.removeToken();
        }
        this.tokens.removeToken();
      } else {
        // *
        this.tokens.removeToken();
        if (this.tokens.matches1(tt._as)) {
          // as
          this.tokens.removeToken();
          // ns
          this.tokens.removeToken();
        }
      }
      // Remove type re-export `... } from './T'`
      if (
        this.tokens.matchesContextual(ContextualKeyword._from) &&
        this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, tt.string)
      ) {
        this.tokens.removeToken();
        this.tokens.removeToken();
        removeMaybeImportAttributes(this.tokens);
      }
      return true;
    }
    return false;
  }

   processImportEquals() {
    const importName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);
    if (this.shouldAutomaticallyElideImportedName(importName)) {
      // If this name is only used as a type, elide the whole import.
      elideImportEquals(this.tokens);
    } else if (this.injectCreateRequireForImportRequire) {
      // We're using require in an environment (Node ESM) that doesn't provide
      // it as a global, so generate a helper to import it.
      // import -> const
      this.tokens.replaceToken("const");
      // Foo
      this.tokens.copyToken();
      // =
      this.tokens.copyToken();
      // require
      this.tokens.replaceToken(this.helperManager.getHelperName("require"));
    } else {
      // Otherwise, just switch `import` to `const`.
      this.tokens.replaceToken("const");
    }
    return true;
  }

   processImport() {
    if (this.tokens.matches2(tt._import, tt.parenL)) {
      // Dynamic imports don't need to be transformed.
      return false;
    }

    const snapshot = this.tokens.snapshot();
    const allImportsRemoved = this.removeImportTypeBindings();
    if (allImportsRemoved) {
      this.tokens.restoreToSnapshot(snapshot);
      while (!this.tokens.matches1(tt.string)) {
        this.tokens.removeToken();
      }
      this.tokens.removeToken();
      removeMaybeImportAttributes(this.tokens);
      if (this.tokens.matches1(tt.semi)) {
        this.tokens.removeToken();
      }
    }
    return true;
  }

  /**
   * Remove type bindings from this import, leaving the rest of the import intact.
   *
   * Return true if this import was ONLY types, and thus is eligible for removal. This will bail out
   * of the replacement operation, so we can return early here.
   */
   removeImportTypeBindings() {
    this.tokens.copyExpectedToken(tt._import);
    if (
      this.tokens.matchesContextual(ContextualKeyword._type) &&
      !this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, tt.comma) &&
      !this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, ContextualKeyword._from)
    ) {
      // This is an "import type" statement, so exit early.
      return true;
    }

    if (this.tokens.matches1(tt.string)) {
      // This is a bare import, so we should proceed with the import.
      this.tokens.copyToken();
      return false;
    }

    // Skip the "module" token in import reflection.
    if (
      this.tokens.matchesContextual(ContextualKeyword._module) &&
      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 2, ContextualKeyword._from)
    ) {
      this.tokens.copyToken();
    }

    let foundNonTypeImport = false;
    let foundAnyNamedImport = false;
    let needsComma = false;

    // Handle default import.
    if (this.tokens.matches1(tt.name)) {
      if (this.shouldAutomaticallyElideImportedName(this.tokens.identifierName())) {
        this.tokens.removeToken();
        if (this.tokens.matches1(tt.comma)) {
          this.tokens.removeToken();
        }
      } else {
        foundNonTypeImport = true;
        this.tokens.copyToken();
        if (this.tokens.matches1(tt.comma)) {
          // We're in a statement like:
          // import A, * as B from './A';
          // or
          // import A, {foo} from './A';
          // where the `A` is being kept. The comma should be removed if an only
          // if the next part of the import statement is elided, but that's hard
          // to determine at this point in the code. Instead, always remove it
          // and set a flag to a–  U–  _–  Áœ  -–  #–  (Œ      	
   ö ‘’  æ å ¸ r ñ ƒ †¯  W˜  uÙ  !ˇ  0  õ˘  :È  ùÙ  Ç Ü ê ¢ˇ  ™ † -“      	
 ìÙ  d	 ¬◊  M ⁄ è ﬂ Æ ∏ +ˇ  z˙  ÷˜  2 ‘ éˇ  ¥Ì  $˘  ö È Z	 ¨ Ó ‰ %Ã      	
 ¿ˇ  6 ‡›  å d ™  % 9 D ! ∂ ¡ ¥	 § Òı  6 P " , å	 x n z◊      	
 g ß ‚  W  ß a ¥ ‹ N Ã E “	  Ö ˘  ñ Û ì ù Á
 C % ª”      	
 q ≈ h„   M Ÿ â “  X ÷ m 5
  ≠ ˘  ¥  ± ª Ò
 u a ˝‘      	
 {  aÂ  ˚ ±  œ ˙  §  Å I
 Z ’ H˘   k Ì ˜ ˚
 œ ª ?ﬁ      	
 , Ï ≈Â  o G ç µ ˝  Ç	 £ : - € ™	 \˙  ¬ = ÿ ‚ « e Q ı◊      	
 Ú  ™Ê  
 Ï ( ‹ ´ Œ  S
 Æ Ω Ê á &  x	 ‚  ˙ Z   ˆ ◊‹      	
 N @ ŒÊ  Ç < “  ˆ ( # ø
 ô *  ë b  ñ	  , 6 † Z P 3›      	
 | À ÚÊ  æ x Ê "  F 7 ›
 ∑ F @ Ω l  †	 2 T ¡ » ™ ñ è›      	
 D  È  /  9 a d ¥ / — æ	 ^  « Ö ”
  k u / %  “€      	
 À g µÍ  œ ß   ’ È < z …
 ù y Ç " } â - ] Ÿ ≈ ª ◊‡      	
 Ï  X  Ï  ¨ˇ  Iˇ  ∂ˇ  :  f˙  p˙  `  ˇÓ  ¯Ï  âÙ  Áı  »Ò  Ï  æÌ  ?ˇ  D  N  ßÙ  òˇ  Ñˇ  ±Î      	
 »	 ë ÀÏ  7  K _ ì ± T ñ ≥ É Z È ï C ’ } á   -  ˛ﬂ      	
 Ñ L =    ¨ ﬁ  ? ] < ° h Û ù d { ≈ d . B M ¿ ∂ ë·      	
 UÒ  N GÒ  w O ã  ¿   $˜  ›ı  ©Ú  R˙  5ˇ  <¯  NÒ  Ù  Œ : D ˇ  c Y Ê      	
 4 ∫ ÒÒ  `  j ú À ﬂ † 2 9 C # F n	 „ Ú ¶ ∞ ˚ 8  ‰      	
 J ˛ kÙ  a C ë ‡ ¸ $ J n [ q i ˝ ?
  % Í Ù A W M `Ë      	
 ó  M˜  ú t ¶ Ï   { Ÿ å I P #  ﬂ X   
 ’ í à çÁ      	
  ‹ Á˘  å d † æ Œ ÿ  s W Ë Ó g æ  P » “ à Ç n ’È      	
 R˚  ò˚  R˚                            Ò¸  >˝  Ò¸                            À Ø  ( ¸   B  }  S m  t q N  õ 
 È ¿ ë  •  ƒ Ë ‘ 1ı      	
 ﬂ Î  ] L    `  π  è ô / í { b ( ∏ P Z ﬁ ◊  ·  ‚ 8  $  µı      	
  ≤! ¯ ;! ! E! ä! Ú   & ÷ ‘ 2 ™ 0 † ~ 	! û! ®! x 1! '! ¯      	
 S ˜! ∫ î! l! º! Ÿ! á  õ  :  V Z  ~  ¯ O! „! Ì! ¥ Ä! v! ﬁ¯      	
 9 ¸# : # Í" ]# ¿# 2" <" ˙ ñ D ∂ √  + U ˆ ‡" Ë# Ú# V  ˛" Ù" ˛ˇ      	
 ¬ e$ C ‘# é# $ =$ •" π" ! Ê ∞   ˇ  ? ≈ < z# Q$ [$ Õ  ∂# ò# ™      	
 Ã É$ q ﬁ# ¢# #$ G$ Ø" √" 5  ∫ .  ! I œ F Ñ# o$ y$ ı   # ¨#      	
  ∫% g K% % n% Å% À$ ﬁ$ ∆! Y! £ Õ" $ " • j  Ò$ î% ß% g# 8% % É     