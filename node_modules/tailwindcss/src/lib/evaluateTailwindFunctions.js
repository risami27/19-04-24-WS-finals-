import dlv from 'dlv'
import didYouMean from 'didyoumean'
import transformThemeValue from '../util/transformThemeValue'
import parseValue from '../value-parser/index'
import { normalizeScreens } from '../util/normalizeScreens'
import buildMediaQuery from '../util/buildMediaQuery'
import { toPath } from '../util/toPath'
import { withAlphaValue } from '../util/withAlphaVariable'
import { parseColorFormat } from '../util/pluginUtils'
import log from '../util/log'

function isObject(input) {
  return typeof input === 'object' && input !== null
}

function findClosestExistingPath(theme, path) {
  let parts = toPath(path)
  do {
    parts.pop()

    if (dlv(theme, parts) !== undefined) break
  } while (parts.length)

  return parts.length ? parts : undefined
}

function pathToString(path) {
  if (typeof path === 'string') return path
  return path.reduce((acc, cur, i) => {
    if (cur.includes('.')) return `${acc}[${cur}]`
    return i === 0 ? cur : `${acc}.${cur}`
  }, '')
}

function list(items) {
  return items.map((key) => `'${key}'`).join(', ')
}

function listKeys(obj) {
  return list(Object.keys(obj))
}

function validatePath(config, path, defaultValue, themeOpts = {}) {
  const pathString = Array.isArray(path) ? pathToString(path) : path.replace(/^['"]+|['"]+$/g, '')
  const pathSegments = Array.isArray(path) ? path : toPath(pathString)
  const value = dlv(config.theme, pathSegments, defaultValue)

  if (value === undefined) {
    let error = `'${pathString}' does not exist in your theme config.`
    const parentSegments = pathSegments.slice(0, -1)
    const parentValue = dlv(config.theme, parentSegments)

    if (isObject(parentValue)) {
      const validKeys = Object.keys(parentValue).filter(
        (key) => validatePath(config, [...parentSegments, key]).isValid
      )
      const suggestion = didYouMean(pathSegments[pathSegments.length - 1], validKeys)
      if (suggestion) {
        error += ` Did you mean '${pathToString([...parentSegments, suggestion])}'?`
      } else if (validKeys.length > 0) {
        error += ` '${pathToString(parentSegments)}' has the following valid keys: ${list(
          validKeys
        )}`
      }
    } else {
      const closestPath = findClosestExistingPath(config.theme, pathString)
      if (closestPath) {
        const closestValue = dlv(config.theme, closestPath)
        if (isObject(closestValue)) {
          error += ` '${pathToString(closestPath)}' has the following keys: ${listKeys(
            closestValue
          )}`
        } else {
          error += ` '${pathToString(closestPath)}' is not an object.`
        }
      } else {
        error += ` Your theme has the following top-level keys: ${listKeys(config.theme)}`
      }
    }

    return {
      isValid: false,
      error,
    }
  }

  if (
    !(
      typeof value === 'string' ||
      typeof value === 'number' ||
      typeof value === 'function' ||
      value instanceof String ||
      value instanceof Number ||
      Array.isArray(value)
    )
  ) {
    let error = `'${pathString}' was found but does not resolve to a string.`

    if (isObject(value)) {
      let validKeys = Object.keys(value).filter(
        (key) => validatePath(config, [...pathSegments, key]).isValid
      )
      if (validKeys.length) {
        error += ` Did you mean something like '${pathToString([...pathSegments, validKeys[0]])}'?`
      }
    }

    return {
      isValid: false,
      error,
    }
  }

  const [themeSection] = pathSegments

  return {
    isValid: true,
    value: transformThemeValue(themeSection)(value, themeOpts),
  }
}

function extractArgs(node, vNodes, functions) {
  vNodes = vNodes.map((vNode) => resolveVNode(node, vNode, functions))

  let args = ['']

  for (let vNode of vNodes) {
    if (vNode.type === 'div' && vNode.value === ',') {
      args.push('')
    } else {
      args[args.length - 1] += parseValue.stringify(vNode)
    }
  }

  return args
}

function resolveVNode(node, vNode, functions) {
  if (vNode.type === 'function' && functions[vNode.value] !== undefined) {
    let args = extractArgs(node, vNo-Package~31bf3856ad364e35~amd64~fr-fr~" InstalledSize="53204" Version="10.0.19041.1">
      <SatelliteInfo>
        <ApplyToInfo>
          <ApplyTo Type="language" Value="fr-FR" />
        </ApplyToInfo>
      </SatelliteInfo>
      <Payload>
        <PayloadItem PayloadHash="QvCy+A+ot3fYxprQtPy51RG0RpTylIkWe4omihm2++I=" PayloadSize="10573" Path="FeaturesOnDemand\fr-fr\baseless\Microsoft-Windows-WMI-SNMP-Provider-Client-Package~31bf3856ad364e35~amd64~fr-fr~.cab" PayloadType="ExpressCab" />
        <PayloadItem PayloadHash="quDhqkhmp47YG2XTSjVA4zif3AScY3JiSrkPIu6uhNE=" PayloadSize="65028" Path="FeaturesOnDemand\fr-fr\baseless\Microsoft-Windows-WMI-SNMP-Provider-Client-Package~31bf3856ad364e35~amd64~fr-fr~.psf" PayloadType="ExpressPSF" />
      </Payload>
    </Package>
    <Package ID="Microsoft-Windows-WMI-SNMP-Provider-Client-Package~31bf3856ad364e35~wow64~fr-fr~" InstalledSize="53307" Version="10.0.19041.1">
      <SatelliteInfo>
        <ApplyToInfo>
          <ApplyTo Type="arch" Value="wow64" />
          <ApplyTo Type="language" Value="fr-FR" />
        </ApplyToInfo>
      </SatelliteInfo>
      <Payload>
        <PayloadItem PayloadHash="U6H+cxRfWjwTakequL+WlEZrtrIWI9tX6NvrutKizQA=" PayloadSize="10783" Path="FeaturesOnDemand\fr-fr\baseless\Microsoft-Windows-WMI-SNMP-Provider-Client-Package~31bf3856ad364e35~wow64~fr-fr~.cab" PayloadType="ExpressCab" />
        <PayloadItem PayloadHash="wfE00AgxiKlMhq94wodym+wkAp9N8UqtPhzHinuWex8=" PayloadSize="64865" Path="FeaturesOnDemand\fr-fr\baseless\Microsoft-Windows-WMI-SNMP-Provider-Client-Package~31bf3856ad364e35~wow64~fr-fr~.psf" PayloadType="ExpressPSF" />
      </Payload>
    </Package>
    <Package ID="Microsoft-Windows-WordPad-FoD-Package~31bf3856ad364e35~amd64~fr-fr~" InstalledSize="181044" Version="10.0.19041.1">
      <SatelliteInfo>
        <ApplyToInfo>
          <ApplyTo Type="language" Value="fr-FR" />
        </ApplyToInfo>
      </SatelliteInfo>
      <Payload>
        <PayloadItem PayloadHash="G5pt4O5ea0F+Tp3k0rTchmHOJhsPTwYsxo/dabvFqCM=" PayloadSize="10187" Path="FeaturesOnDemand\fr-fr\baseless\Microsoft-Windows-WordPad-FoD-Package~31bf3856ad364e35~amd64~fr-fr~.cab" PayloadType="ExpressCab" />
        <PayloadItem PayloadHash="f4Q2u8gdHrESqJ0+tbP4hxYfUu7fZpSTAX/nR1a0cQE=" PayloadSize="64054" Path="FeaturesOnDemand\fr-fr\baseless\Microsoft-Windows-WordPad-FoD-Package~31bf3856ad364e35~amd64~fr-fr~.psf" PayloadType="ExpressPSF" />
      </Payload>
    </Package>
    <Package ID="Microsoft-Windows-WordPad-FoD-Package~31bf3856ad364e35~wow64~fr-fr~" InstalledSize="181118" Version="10.0.19041.1">
      <SatelliteInfo>
        <ApplyToInfo>
          <ApplyTo Type="arch" Value="wow64" />
          <ApplyTo Type="language" Value="fr-FR" />
        </ApplyToInfo>
      </SatelliteInfo>
      <Payload>
        <PayloadItem PayloadHash="enb7bq9E+CnQUZUaV8t4f8u0s0+rmb72Mt35mUAc/vY=" PayloadSize="10205" Path="FeaturesOnDemand\fr-fr\baseless\Microsoft-Windows-WordPad-FoD-Package~31bf3856ad364e35~wow64~fr-fr~.cab" PayloadType="ExpressCab" />
        <PayloadItem PayloadHash="xk5iMFVrv5gXXCJii5FL2d//sV2i8kUNLIOgwB+8nRw=" PayloadSize="64226" Path="FeaturesOnDemand\fr-fr\baseless\Microsoft-Windows-WordPad-FoD-Package~31bf3856ad364e35~wow64~fr-fr~.psf" PayloadType="Expres